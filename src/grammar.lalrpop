use crate::tokens::{Token, LexicalError};
use super::utils;
use lalrpop_util::ParseError;

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "var" => Token::KeywordVar,
    "print" => Token::KeywordPrint,
    "block" => Token::KeywordBlock,
    "identifier" => Token::Identifier(<String>),
    "int" => Token::Integer(<i32>),
    "null" => Token::NullValue,
    "(" => Token::LParen,
    ")" => Token::RParen,
    ";" => Token::Semicolon,
    ":=" => Token::Assign,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::CmpToken,
    "add1" => Token::OperatorAdd1,
    "sub1" => Token::OperatorSub1,
    "let" => Token::KeywordLet,
    "set" => Token::KeywordSet,
    "repeat-until" => Token::KeywordRepeatUntil,
    "if" => Token::KeywordIf,
    "bool" => Token::Boolean(<bool>),
    ">" => Token::OperatorGreater,
    "<" => Token::OperatorLess,
    ">=" => Token::OperatorGreaterEqual,
    "<=" => Token::OperatorLessEqual,
    "=" => Token::OperatorEqual,
    "fun" => Token::OperatorFun,
    "i64" => Token::KeywordInt,
    "boolean" => Token::KeywordBool,
  }
}


pub TypeMatching: utils::Type = {
  "i64" => utils::Type::Int,
  "boolean" => utils::Type::Bool,
}

pub ExpressionBody: utils::Expr = {
  "let" "{" <bindings:VarBinding*> "}" "{" <expr:Expression> "}" =>? {
      if bindings.len() == 0 {Err(ParseError::User { 
          error: LexicalError::InvalidLength("empty binding in let".to_string())
        })}
      else {Ok(utils::Expr::Let (bindings, Box::new(expr)))}
    },
  "set" <name:"identifier"> ":=" <value:Expression> ";" =>? {
    if name == "input" {Err(ParseError::User { 
        error: LexicalError::InvalidSet
      })}
    else {Ok(utils::Expr::Set (name, Box::new(value)))}
  },
}

pub VarBinding : (String, utils::Expr) = {
  "var" <name:"identifier"> ":=" <value:Expression> ";" => {
    (name, value)
  }
}

pub Expression: utils::Expr = {
  Term,
  ExpressionBody,
}

pub Term: utils::Expr = {
  Addend,
  <lhs:Term> <op:AddOp> <rhs:Addend> => utils::Expr::BinOp (op, Box::new(lhs), Box::new(rhs))
}

pub Addend: utils::Expr = {
  Factor,
  <lhs:Addend> "*" <rhs:Factor> => utils::Expr::BinOp(utils::Op2::Times, Box::new(lhs), Box::new(rhs))
}

pub Factor: utils::Expr = {
  Summand,
  "(" <op:UnOp> <rhs:Summand> ")" => utils::Expr::UnOp (op, Box::new(rhs))
}

pub Summand: utils::Expr = {
  <val:"int"> => {
    utils::Expr::Number(val)
  },
  <name:"identifier"> => {
    utils::Expr::Id(name)
  },
  "(" <e:Expression> ")" => e
}

pub AddOp: utils::Op2 = {
  "+" => utils::Op2::Plus,
  "-" => utils::Op2::Minus,
}

pub UnOp: utils::Op1 = {
  "add1" => utils::Op1::Add1,
  "sub1" => utils::Op1::Sub1,
}